import { readFileSync, writeFileSync } from "fs";
import { fileURLToPath } from "url";
import { dirname, join } from "path";

// Fix for __dirname in ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Paths
const packageJsonPath = join(__dirname, "../package.json");
const pyprojectPath = join(__dirname, "../../python/lexio/pyproject.toml");
const versionPyPath = join(__dirname, "../../python/lexio/lexio/_version.py");

// Read package.json
const packageJson = JSON.parse(readFileSync(packageJsonPath, "utf8"));
const newVersion = packageJson.version;

// Function to split version into a tuple (handling pre-release tags)
function parseVersion(version) {
    return version
        .replace(/-/g, ".")  // Convert "-" to "." for uniform splitting
        .split(".")           // Split by "."
        .map(part => (part.match(/^\d+$/) ? parseInt(part, 10) : `"${part}"`)); // Convert numbers to integers, keep strings in quotes
}

// Convert version string to tuple
const versionTuple = `(${parseVersion(newVersion).join(", ")})`;

// Update pyproject.toml
let pyprojectContent = readFileSync(pyprojectPath, "utf8");

// Replace the version in pyproject.toml using a robust regex
pyprojectContent = pyprojectContent.replace(
  /version\s*=\s*".*?"/,
  `version = "${newVersion}"`
);

// Write back to pyproject.toml
writeFileSync(pyprojectPath, pyprojectContent, "utf8");

// Generate _version.py
const versionPyContent = `# file generated by sync-version.js\n# don't change!\n\nTYPE_CHECKING = False\nif TYPE_CHECKING:\n    from typing import Tuple, Union\n    VERSION_TUPLE = Tuple[Union[int, str], ...]\nelse:\n    VERSION_TUPLE = object\n\nversion: str\n__version__: str\n__version_tuple__: VERSION_TUPLE\nversion_tuple: VERSION_TUPLE\n\n__version__ = version = '${newVersion}'\n__version_tuple__ = version_tuple = ${versionTuple}\n`;

writeFileSync(versionPyPath, versionPyContent, "utf8");

console.log(`✅ Updated pyproject.toml version to ${newVersion}`);
console.log(`✅ Updated _version.py version to ${newVersion}`);
